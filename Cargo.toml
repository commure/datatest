[package]
name = "datatest"
version = "0.5.0"
authors = ["Ivan Dubrov <ivan@commure.com>"]
edition = "2018"
repository = "https://github.com/commure/datatest"
license = "MIT/Apache-2.0"
readme = "README.md"
description = """
Data-driven tests in Rust
"""

[[test]]
name = "datatest_stable"
harness = false

[dependencies]
datatest-derive = { path = "datatest-derive", version = "=0.4.0" }
regex = "1.0.0"
walkdir = "2.1.4"
serde = "1.0.84"
serde_yaml = "0.8.7"
yaml-rust = "0.4.2"
ctor = "0.1.10"
region = { version = "2.1.2", optional = true }

[dev-dependencies]
serde = { version = "1.0.84", features = ["derive"] }

[workspace]
members = [
    "datatest-derive"
]

[features]
# Use `#[test_case]`-based test registration (only works on nightly when `custom_test_frameworks` feature is enabled).
# Without that feature turned on, the default test registration method is to use `ctor` crate to create a global list
# of all tests.
test_case_registration = []

# Use very, very, very sketchy way of intercepting a test runner on a stable Rust. Without that feature, there are two
# options:
# 1. use `#![test_runner(datatest::runner)]` (nightly-only)
# 2. use `harness = false` in `Cargo.toml` with `datatest::harness!()` macro; however, in this case care must be taken
# to use `#[datatest::test]` instead of regular `#[test]` or otherwise tests will be silently ignored.
unsafe_test_runner = ["region"]

# Make this crate useable on stable Rust channel. Uses forbidden technique to allow usage of this crate on a stable
# Rust compiler. This, however, does not bring any guarantees above "nighly" -- this crate can break at any time.
subvert_stable_guarantees = []

default = []
